# -*- coding: utf-8 -*-
"""task 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ms-kEG9Af6SDrCIsNj18A7iZjQcOt4hX

# Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeRegressor
import warnings

warnings.filterwarnings("ignore")

"""#Reading Data & Exploration"""

The variables are explained below.

id: id of house

fiyat: sale price of house (TL)

oda_salon_sayisi: total number of rooms in the house

net_m2: size of house (in m2)

bina_yasi: age of the house (in years)

isinma_tipi: type of heating system for the house

krediye_uygunluk: situation of suitability for credit

bulundugu_kat: position of the house (floor number)

banyo_sayisi: number of bathrooms in the house

ilce: name of the district where the house locates in

nüfus: population of district where the house locates in

eğitim: education level of the district where the house locates in

okuma_yazma_bilmeyen: percentage of the illiterate population of the district where the house locates in

# Read data
import pandas as pd
import io
from google.colab import files
uploaded = files.upload()
df = pd.read_csv(io.BytesIO(uploaded['dataset.csv']))
df.head()

# Replace Turkish characters in columns
df = df.rename(columns={'eðitim':'egitim', 'okuma_yazma_bilmeyen,,': 'okuma_yazma_bilmeyen', 'nüfus':'nufus'})

# Dropping id and Sutun1 for these have the same values with our index
df.drop(["Sütun1", "id"], axis=1, inplace=True)

# Convert column to float if dtype is object
if df.okuma_yazma_bilmeyen.dtype == 'O':
  df["okuma_yazma_bilmeyen"] = pd.to_numeric(df["okuma_yazma_bilmeyen"].str[:-1].str.replace(',','.'), downcast='float', errors='coerce')

df.head()

#Print min, max, mean and median for all numeric values to look for outliers
numeric_cols = ['fiyat', 'oda_salon_sayisi', 'net_m2', 'bina_yasi',
                'banyo_sayisi', 'nufus', 'okuma_yazma_bilmeyen']

for var in numeric_cols:
  print(f"Variable: {var}, Min: {df[var].min()}, Max: {df[var].max()}, Mean: {df[var].mean()}, Median: {df[var].median()}")

# Check rows with null values
df[df.isnull().any(axis=1)]

# m2 should not be less than ~40
df[df.net_m2 < 40]["net_m2"].plot(kind="hist")
plt.show()

# We can see that we have some outliers, no house should have 140 rooms
df[df["oda_salon_sayisi"] > 7]["oda_salon_sayisi"].plot(kind="hist")
plt.show()

# Building age does not have significant wrong data entries
df["bina_yasi"].plot(kind="hist")
plt.show()

# We have some outliers in price but they do not seem to be wrong
# High prices are likely to be luxury houses
# and low prices seem like rentals
df[(df["fiyat"] > 5_000_000)]["fiyat"].plot(kind="hist")
plt.show()
df[(df["fiyat"] < 10_000)]["fiyat"].plot(kind="hist")
plt.show()

"""#Preprocessing & Cleaning"""

# Fix typos in education
df['egitim'] = df['egitim'].str.replace('liS3','Lise')
df['egitim'] = df['egitim'].str.replace('liSans','Lisans')

# Fix typos in district
df['ilce'] = df['ilce'].str.replace('cankaya', 'Çankaya')

# Fill nan values according to district;
# population, education and literacy all depend on district
for i, row in df.iterrows():
  if pd.isnull(row["ilce"]):
    df.loc[i, "ilce"] = df[df.nufus == row.nufus]["ilce"].value_counts().idxmax()
  if pd.isnull(row["nufus"]):
    df.loc[i, "nufus"] = df[df.ilce == row.ilce]["nufus"].value_counts().idxmax()
  if pd.isnull(row["egitim"]):
    df.loc[i, "egitim"] = df[df.ilce == row.ilce]["egitim"].value_counts().idxmax()
  if pd.isnull(row["okuma_yazma_bilmeyen"]):
    df.loc[i, "okuma_yazma_bilmeyen"] = df[df.ilce == row.ilce]["okuma_yazma_bilmeyen"].value_counts().idxmax()

# Make a copy of the original dataframe
df_copy = df.copy()

# Encoding education as binary
df.loc[df["egitim"] == "Lise" , "egitim"] = 0
df.loc[df["egitim"] == "Lisans" , "egitim"] = 1

# Encoding heating type as integer
# We try to give the category with higher median prices a larger number
df.loc[df["isinma_tipi"] == "Kombi" , "isinma_tipi"] = 0
df.loc[df["isinma_tipi"] == "Merkezi(PayÖlçer)" , "isinma_tipi"] = 2
df.loc[df["isinma_tipi"] == "Merkezi" , "isinma_tipi"] = 1
df.loc[df["isinma_tipi"] == "KatKaloriferi" , "isinma_tipi"] = 1
df.loc[df["isinma_tipi"] == "Klima" , "isinma_tipi"] = 1

# Filling na values with 0 as they may be buildings with no heating
df.fillna({'isinma_tipi':0},inplace=True)

# Encoding and grouping building floor data
# Again we tried to give integer values according to these categories effects on price
df.loc[df["bulundugu_kat"] == "Kot 1" , "bulundugu_kat"] = 0
df.loc[df["bulundugu_kat"] == "Yüksek Giriþ" , "bulundugu_kat"] = 0
df.loc[df["bulundugu_kat"] == "Kot 3" , "bulundugu_kat"] = 0
df.loc[df["bulundugu_kat"] == "Kot 2" , "bulundugu_kat"] = 0
df.loc[df["bulundugu_kat"] == "Bodrum" , "bulundugu_kat"] = 0
df.loc[df["bulundugu_kat"] == "1. Kat" , "bulundugu_kat"] = 1
df.loc[df["bulundugu_kat"] == "Bahçe Katý" , "bulundugu_kat"] = 1
df.loc[df["bulundugu_kat"] == "Zemin" , "bulundugu_kat"] = 1
df.loc[df["bulundugu_kat"] == "Giriþ Katý" , "bulundugu_kat"] = 1
df.loc[df["bulundugu_kat"] == "Çatý Katý" , "bulundugu_kat"] = 1
df.loc[df["bulundugu_kat"] == "2. Kat" , "bulundugu_kat"] = 2
df.loc[df["bulundugu_kat"] == "3. Kat" , "bulundugu_kat"] = 2
df.loc[df["bulundugu_kat"] == "4. Kat" , "bulundugu_kat"] = 2
df.loc[df["bulundugu_kat"] == "5. Kat" , "bulundugu_kat"] = 2
df.loc[df["bulundugu_kat"] == "Teras Katý" , "bulundugu_kat"] = 2
df.loc[df["bulundugu_kat"] == "En Üst Kat" , "bulundugu_kat"] = 2
df.loc[df["bulundugu_kat"] == "6. Kat" , "bulundugu_kat"] = 3
df.loc[df["bulundugu_kat"] == "7. Kat" , "bulundugu_kat"] = 3
df.loc[df["bulundugu_kat"] == "8. Kat" , "bulundugu_kat"] = 3
df.loc[df["bulundugu_kat"] == "9. Kat" , "bulundugu_kat"] = 3
df.loc[df["bulundugu_kat"] == "10. Kat" , "bulundugu_kat"] = 3
df.loc[df["bulundugu_kat"] == "Ara Kat" , "bulundugu_kat"] = 3
df.loc[df["bulundugu_kat"] == "11. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "12. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "13. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "14. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "15. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "16. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "17. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "18. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "19. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "20. Kat" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "21 ve üzeri" , "bulundugu_kat"] = 4
df.loc[df["bulundugu_kat"] == "Müstakil" , "bulundugu_kat"] = 5
df.loc[df["bulundugu_kat"] == "Villa Katý" , "bulundugu_kat"] = 5

# Filling na values with 1 as that is most likely value
df.fillna({'bulundugu_kat':1}, inplace=True)


# Grouping building age variables
# New values roughly correlate with demand
df.loc[df["bina_yasi"] < 6 , "bina_yasi"] = 3
df.loc[(df["bina_yasi"] >= 6 ) & (df["bina_yasi"] <= 15 ), "bina_yasi"] = 2
df.loc[(df["bina_yasi"] >= 16 ) & (df["bina_yasi"] <= 30 ), "bina_yasi"] = 1
df.loc[ df["bina_yasi"] > 30, "bina_yasi"] = 0

# Fillna with 1, the most likely value
df.fillna({'bina_yasi':1},inplace=True)


# Encoding and grouping districts
# Çankaya-Keçiören and Sincan-Mamak data's seem very similar
df.loc[(df["ilce"] == "Çankaya") | (df["ilce"] == "Keçiören") , "ilce"] = 1
df.loc[(df["ilce"] == "Sincan") | (df["ilce"] == "Mamak") , "ilce"] = 0


# Encoding credit as a binary variable
df.loc[df["krediye_uygunluk"] == "Uygun" , "krediye_uygunluk"] = 1
df.loc[df["krediye_uygunluk"] == "Uygun deðil" , "krediye_uygunluk"] = 0
df.fillna({'krediye_uygunluk':0},inplace=True)


# Drop duplicate rows
df.drop_duplicates(inplace=True)

# Population and literacy data does not give us any new information
# We can derive the same information from district and education columns
df.drop(['nufus','okuma_yazma_bilmeyen'],axis=1,inplace=True)

df.info()

df.describe()

df.isna().sum()

# For data points with nan m2 values, we fill it with median m2 value
# among other houses with similar room numbers
for i in df.loc[(df.net_m2.isna())].oda_salon_sayisi.unique():
  df.loc[(df.oda_salon_sayisi == i) & (df.net_m2.isna()), 'net_m2'] = df[df.oda_salon_sayisi == 4]['net_m2'].median()

# Similarly, updating nan room numbers with median room number among similar m2
for i in df.loc[(df.oda_salon_sayisi.isna())].net_m2.unique():
  df.loc[(df.net_m2 == i) & (df.oda_salon_sayisi.isna()), 'oda_salon_sayisi'] = df[df.net_m2 == i]['oda_salon_sayisi'].median()

# Correlation and outliers from m2 - price
sns.boxplot(x=df['fiyat'],y=df['net_m2'])
plt.show()

# Price, number of rooms and bathrooms, m2 are columns with significant outliers
# We can graph these columns to take a closer look
columns_num = ['fiyat', 'oda_salon_sayisi', 'net_m2', 'banyo_sayisi']
plt.figure(figsize=(10,20))
for i,col in enumerate(columns_num,1):
  plt.subplot(len(columns_num),2,i)
  sns.boxplot(x=df[col])
  plt.ylabel(col)
plt.show()

# Here we view tho outlier data points using standard deviation and z score
mean=df['oda_salon_sayisi'].mean()
std=df['oda_salon_sayisi'].std()
threshold = 7
outlier = []
for i in df['oda_salon_sayisi']:
    z = (i-mean)/std
    if z > threshold:
        outlier.append(i)
print('outlier in oda salon sayisi : ', outlier)


mean=df['net_m2'].mean()
std=df['net_m2'].std()
threshold = 7
outlier = []
for i in df['net_m2']:
    z = (i-mean)/std
    if z > threshold:
        outlier.append(i)
print('outlier in m2 : ', outlier)

mean=df['fiyat'].mean()
std=df['fiyat'].std()
threshold = 7
outlier = []
for i in df['fiyat']:
    z = (i-mean)/std
    if z > threshold:
        outlier.append(i)
print('outlier in fiyat : ', outlier)

# We take houses smaller than 50 m^2 as wrong entries and replace those values
# using a decision tree regressor built with houses larger than 70 m^2
df_mod = df[df['net_m2'] > 70]

df_mod.dropna(inplace=True)

model = DecisionTreeRegressor(max_depth=3)

y = df_mod['net_m2']
X = df_mod[['fiyat','oda_salon_sayisi','banyo_sayisi']]

model.fit(X, y)

for i,row in df[df.net_m2 <50].iterrows():
  a = np.array([row['fiyat'],row['oda_salon_sayisi'],row['banyo_sayisi']]).reshape(1, -1)
  df.loc[i, "net_m2"] = model.predict(a)

columns_num = ['net_m2']
plt.figure(figsize=(6,6))
for i,col in enumerate(columns_num,1):
  plt.subplot(len(columns_num),1,i)
  sns.boxplot(x=df[col])
  plt.ylabel(col)
plt.show()

# Drop rows with missing price and rows with missing room number and m2
# as we cannot reliably fill those, and there are only ~20 such rows
df.dropna(inplace=True)

# Sanity check for nan values
assert df.isna().sum().sum() == 0, "There are still NaN values in dataset"

# Taking a final look at a random sample of the data as we finish preprocessing
df.sample(10)

# Downcasting our data types
df["fiyat"] = df.fiyat.astype("uint32")
df["oda_salon_sayisi"] = df.oda_salon_sayisi.astype("uint8")
df["net_m2"] = df.net_m2.astype("uint16")
df["bina_yasi"] = df.bina_yasi.astype("uint8")
df["isinma_tipi"] = df.isinma_tipi.astype("int8")
df["krediye_uygunluk"] = df.krediye_uygunluk.astype("int8")
df["bulundugu_kat"] = df.bulundugu_kat.astype("int8")
df["banyo_sayisi"] = df.banyo_sayisi.astype("uint8")
df["ilce"] = df.ilce.astype("int8")
df["egitim"] = df.egitim.astype("int8")

df.info()

df.describe()

dataplot = sns.heatmap(df.corr(), cmap="YlGnBu", annot=True)

"""#Data Exploration & Insights

##Viewing the relationship of Price & m^2 and examining the results of preprocessing on this
"""

# Here we view price-m2 relationship before and after preprocessing
sns.scatterplot(data=df_copy, x="net_m2", y="fiyat")
plt.show()
sns.scatterplot(data=df, x="net_m2", y="fiyat")
plt.show()

"""##Looking for apartment buildings in each district"""

# Here we are trying to look for buildings that are higher than floor 2 and
# heated with 'merkezi'.
df3 = df_copy.copy()

yuksek_katlar = ["2. Kat" , "3. Kat" , "4. Kat" , "5. Kat" , "Teras Katý", "En Üst Kat",
"6. Kat" , "7. Kat" , "8. Kat" , "9. Kat" , "10. Kat" , "Ara Kat" , "11. Kat" ,
"12. Kat" , "13. Kat" , "14. Kat" , "15. Kat" , "16. Kat" , "17. Kat" ,
"18. Kat" , "19. Kat" , "20. Kat" , "21 ve üzeri", "Çatý Katý"]

for kat in yuksek_katlar:
  df3.loc[df3["bulundugu_kat"] == kat , "bulundugu_kat"] = "Yuksek"

def absolute_value(val):
    a  = np.round(val/100.*y.sum(), 0)
    return a

dic = {}
for ilce in df3.ilce.unique():
  df_temp = df3[(df3.isinma_tipi == "Merkezi") & (df3.bulundugu_kat == "Yuksek")
  & (df3.ilce == ilce)]
  dic[ilce] = df_temp.shape[0]

y = np.array(list(dic.values()))
mylabels = list(dic.keys())
myexplode = [0.1, 0.1, 0.1, 0.4]

plt.pie(y, labels=mylabels, explode=myexplode, shadow=True, autopct=absolute_value)
plt.show()

"""##Finding the district with the highest number of student accomodations"""

# Viewing houses cheaper than 5k according to district and education
df_temp = df_copy[df_copy.fiyat <= 5000]

ax = sns.swarmplot(data=df_temp, x="fiyat", y="egitim", hue="ilce")
ax.set_title("Fiyatı 5000'den ucuz olan evlerin ilçelere göre dağılımı")
plt.show()

"""##Searching for most affordable heating in each district"""

# Looking at the cheapest heating type according to district
ilce_list = df_copy["ilce"].unique()

for ilce in ilce_list:
  ax = sns.barplot(x="isinma_tipi", y="fiyat", data=df_copy[df_copy.ilce == ilce], hue="isinma_tipi", dodge=False)
  ax.set_title(f"İlçe: {ilce}")
  plt.show()

df_rental = df_copy.loc[df_copy.fiyat < 5000].sort_values('fiyat')
df_sale = df_copy.loc[df_copy.fiyat >= 5000].sort_values('fiyat')

# Draw a nested barplot by species and sex

g = sns.catplot(
    data=df_rental, kind="bar",
    x="ilce", y="fiyat", hue="isinma_tipi",
    ci="sd", palette="dark", alpha=.6, height=6
)
g.despine(left=True)
g.set_axis_labels("", "Price (TL)")
g.fig.suptitle('Prices by Heating Among Rentals')
g.legend.set_title("")
plt.show()

g = sns.catplot(
    data=df_sale, kind="bar",
    x="ilce", y="fiyat", hue="isinma_tipi",
    ci="sd", palette="dark", alpha=.6, height=6
)
g.despine(left=True)
g.set_axis_labels("", "Price (Mil TL)")
g.fig.suptitle('Prices by Heating Among Houses For Sale')
g.legend.set_title("")
plt.show()